<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="io.vpplab.flow.domain.project.PrjDao">
    <select id="getMyInfo" parameterType="hashMap" resultType="hashMap">
        SELECT
              A.id AS 사용자ID
             ,A.name AS 이름
             ,A.department AS  소속
             ,A.job_title AS 직위
             ,A.phone AS 전화번호
             ,A.email AS 이메일
             ,A.login_id AS 로그인ID
             ,A.login_password AS 로그인암호
             ,A.authorization_id AS 권한관리ID
             ,B.name AS 권한관리명
             ,A.sign_up_at AS 가입일시
             ,A.agency_id AS 중개사업자ID
        FROM user A
                 LEFT OUTER JOIN authorization B ON A.authorization_id = B.id
        WHERE 1=1
          AND  A.login_id = #{로그인ID}
    </select>
    <update id="setMyInfo" parameterType="hashMap">
        UPDATE user SET
            name = #{이름}
            ,department = #{소속}
            ,job_title = #{직위}
            ,phone = #{전화번호}
            ,email = #{이메일}
            <if test='login_password != null and login_password !=""'>
                ,login_password = #{login_password}
            </if>
            WHERE login_id = #{로그인ID}
    </update>
    <update id="getWithdrawal" parameterType="hashMap">
      DELETE FROM user WHERE  login_id = #{로그인ID}
    </update>

    <select id="getUserList" parameterType="hashMap" resultType="hashMap">
        SELECT
              A.id AS 사용자ID
             ,A.name AS 이름
             ,A.department AS  소속
             ,A.job_title AS 직위
             ,A.phone AS 전화번호
             ,A.email AS 이메일
             ,A.login_id AS 로그인ID
             ,A.login_failure_count AS 로그인실패횟수
             ,A.authorization_id AS 권한관리ID
             ,B.name AS 권한관리명
             ,A.sign_up_at AS 가입일시
             ,A.agency_id AS 중개사업자ID
             ,CASE WHEN B.has_read_auth = '1' AND B.has_modify_auth = '1' THEN '1' ELSE '0' END AS 관리자여부
        FROM user A
                 LEFT OUTER JOIN authorization B ON A.authorization_id = B.id
        WHERE A.agency_id = #{중개사업자ID}
    </select>

    <select id="getUserListCnt" parameterType="hashMap" resultType="int">
        SELECT
          COUNT(*) AS CNT
        FROM user A
                 LEFT OUTER JOIN authorization B ON A.authorization_id = B.id
        WHERE A.agency_id = #{중개사업자ID}
    </select>

    <select id="getUserDtl" parameterType="hashMap" resultType="hashMap">
        SELECT
              A.id AS 사용자ID
             ,A.name AS 이름
             ,A.department AS  소속
             ,A.job_title AS 직위
             ,A.phone AS 전화번호
             ,A.email AS 이메일
             ,A.login_id AS 로그인ID
             ,A.login_failure_count AS 로그인실패횟수
             ,A.authorization_id AS 권한관리ID
             ,B.name AS 권한관리명
             ,A.sign_up_at AS 가입일시
             ,A.agency_id AS 중개사업자ID
             ,CASE WHEN B.has_read_auth = '1' AND B.has_modify_auth = '1' THEN '1' ELSE '0' END AS 관리자여부
        FROM user A
                 LEFT OUTER JOIN authorization B ON A.authorization_id = B.id
        WHERE A.id = #{사용자ID}
    </select>

    <update id="setUserSave" parameterType="hashMap">
        UPDATE user SET
         name = #{이름}
         ,department = #{소속}
         ,job_title = #{직위}
         ,phone = #{전화번호}
         ,email = #{이메일}
         ,authorization_id = #{권한레벨}
        WHERE id = #{사용자ID}
    </update>
    <update id="setUserPswd" parameterType="hashMap">
        UPDATE user SET
         login_failure_count = '0'
        ,login_password = #{로그인비밀번호}
        WHERE id = #{사용자ID}
    </update>

    <update id="setUserDel" parameterType="hashMap">
        DELETE FROM user WHERE  id = #{사용자ID}
    </update>
    <insert id="setUserAdd" parameterType="hashMap">
     INSERT INTO user(
          name
          ,department
          ,login_id
          ,job_title
          ,phone
          ,email
          ,authorization_id
          ,login_password
          ,login_at
          ,sign_up_at
          ,agency_id
     ) VALUES (
          #{이름}
          ,#{소속}
          ,#{로그인ID}
          ,#{직위}
          ,#{전화번호}
          ,#{이메일}
          ,#{권한레벨}
          ,#{로그인비밀번호}
          ,NOW()
          ,NOW()
          ,#{중개사업자ID}
     )

    </insert>
    <select id="getBoxLvl" parameterType="hashMap" resultType="hashMap">
        SELECT
           A.id AS 권한레벨
        ,A.name AS 권한명
        FROM authorization A
        WHERE A.agency_id = #{중개사업자ID}
        AND A.has_read_auth NOT IN('1')
        AND A.has_modify_auth NOT IN('1')
    </select>
    <select id="getUserAuthMenuList" parameterType="hashMap" resultType="hashMap">
        SELECT
            A.id AS 메뉴ID
             ,A.category AS 2차메뉴
             ,A.sub_category AS 2차메뉴
             ,A.url AS URL주소
             ,A.view_name AS 화면명
             ,A.is_view AS 화면여부
             ,CASE WHEN B.has_read_auth = '1' THEN '1' ELSE '0' END AS 기본메뉴권한
             ,CASE WHEN B.has_modify_auth = '1' THEN '1' ELSE '0' END  AS 메뉴수정권한
        FROM menu A
                 LEFT OUTER JOIN auth_menu_mapping B ON A.id = B.menu_id AND B.auth_id = #{권한레벨}
        WHERE 1=1
          AND A.has_admin_auth = '1'
    </select>
    <update id="getUserAuthMenuDel" parameterType="hashMap">
        DELETE FROM auth_menu_mapping WHERE  auth_id = #{권한레벨}
    </update>
    <update id="getUserAuthMenuSave" parameterType="hashMap">
        INSERT INTO auth_menu_mapping(
            auth_id
            ,menu_id
            ,has_read_auth
            ,has_modify_auth
        )VALUES(
            #{권한레벨}
            ,#{메뉴ID}
            ,#{기본메뉴권한}
            ,#{메뉴수정권한}
        )
    </update>
    <insert id="setAuthorizationAdd" parameterType="hashMap">
        INSERT INTO authorization(
              agency_id
             ,name
             ,has_read_auth
             ,has_modify_auth
        )VALUES(
                #{중개사업자ID}
               ,#{권한명}
               ,'0'
               ,'0'
               )
        <selectKey keyProperty="auth_id" resultType="hashmap" order="AFTER">
            SELECT LAST_INSERT_ID() AS auth_id
        </selectKey>
    </insert>
    <update id="setAuthorizationSave" parameterType="hashMap">
      UPDATE authorization SET
          name = #{권한명}
      WHERE id =  #{권한레벨}
    </update>
</mapper>


