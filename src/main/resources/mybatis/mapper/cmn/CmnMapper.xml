<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="io.vpplab.flow.domain.cmn.CmnDao">
    <select id="getLogin" parameterType="hashMap" resultType="hashMap">
        SELECT
            A.name AS 이름
             ,A.department AS  소속
             ,A.job_title AS 직위
             ,A.phone AS 전화번호
             ,A.email AS 이메일
             ,A.login_id AS 로그인ID
             ,A.login_password AS 로그인암호
             ,A.authorization_id AS 권한관리ID
             ,B.name AS 권한관리명
             ,A.sign_up_at AS 가입일시
             ,C.name AS 중개사업자명
             ,C.phone AS 대표전화번호
             ,C.email AS 대표이메일
             ,A.agency_id AS 중개사업자ID
             ,A.id AS 사용자식별자
        FROM user A
                 LEFT OUTER JOIN authorization B ON A.authorization_id = B.id
                 LEFT OUTER JOIN agency C ON A.agency_id = C.id
        WHERE 1=1
        AND  A.login_id = #{로그인ID}
    </select>
    <select id="getMenuMng" parameterType="hashMap" resultType="hashMap">
        SELECT
              D.id AS 메뉴ID
             ,D.category AS 1차메뉴
             ,D.sub_category AS 2차메뉴
             ,D.url AS URL주소
             ,D.view_name AS 화면이름
             ,D.is_view AS 화면여부
             ,D.is_default_menu AS 기본메뉴여부
             ,C.has_modify_auth AS 수정권한여부
             ,C.has_read_auth AS 읽기권한여부
        FROM user A
                 INNER JOIN authorization B ON A.authorization_id = B.id AND A.agency_id = B.agency_id
                 INNER JOIN auth_menu_mapping C ON B.id = C.auth_id AND C.has_read_auth ='1'
                 LEFT OUTER JOIN menu D ON C.menu_id = D.id
        WHERE 1=1
          AND A.login_id = #{로그인ID}
        ORDER BY A.id
    </select>
    <select id="getMyLoginInfo" parameterType="hashMap" resultType="hashMap">
        SELECT
              A.name AS 이름
             ,A.phone AS 전화번호
             ,A.email AS 이메일
             ,A.login_id AS 로그인ID
        FROM user A
        WHERE A.login_id = #{로그인ID}
          AND  A.email = #{이메일}
    </select>
    <update id="setMyPswd"  parameterType="hashMap" >
        UPDATE user SET
            login_password = #{로그인비밀번호}
        WHERE login_id = #{로그인ID}
          AND  email = #{이메일}
    </update>

    <select id="getMsg" parameterType="hashMap" resultType="string">
        SELECT
            A.message AS msg
        FROM message_template A
        WHERE A.code = #{코드}
    </select>

    <select id="getAdminCode"  resultType="hashMap">
        SELECT
            category AS 카테고리
            ,code AS 코드
            ,name AS 코드명
        FROM admin_common_code
        WHERE is_usable = '1'
        ORDER BY category, sequence
    </select>
    <select id="getPltfMng" parameterType="hashMap" resultType="hashMap">
        SELECT
            A.id AS 중개사업자ID
             ,A.status AS 상태
             ,F.login_id AS 관라자ID
             ,A.name AS 중개사업자명
             ,F.name AS 대표자명
             ,A.phone AS 대표전화번호
             ,A.email AS 대표이메일
             ,A.business_registration_no AS 사업자번호
             ,B.CNT AS 회원수
             ,C.CNT AS 발전소수
             ,'' AS 최종로그인
             ,A.address AS 주소
             ,A.zip_code AS 우편번호
             ,A.created_at AS 가입일자
        FROM agency A
                 LEFT OUTER JOIN (
            SELECT
                AA.agency_id
                 ,COUNT(AA.id) AS CNT
            FROM user AA
            GROUP BY AA.agency_id
        ) B ON A.id = B.agency_id
                 LEFT OUTER JOIN (
                                SELECT
                                    AA.agency_id
                                     ,COUNT(CC.id) AS CNT
                                FROM resource_set AA
                                         LEFT OUTER JOIN resource_set_list BB ON AA.id = BB.resource_set_id
                                         LEFT OUTER JOIN resource CC ON BB.resource_id = CC.id
                                GROUP BY AA.agency_id
                            ) C ON A.id = C.agency_id
                 LEFT OUTER JOIN authorization D ON A.id = D.agency_id	AND D.has_read_auth = '1'	AND D.has_modify_auth = '1'
                 LEFT OUTER JOIN user F ON D.id = F.authorization_id
        ORDER BY A.id
        LIMIT #{페이지번호},#{행갯수}
    </select>
    <select id="getPltfMngCnt" parameterType="hashMap" resultType="int">
        SELECT
            COUNT(A.id) AS CNT
        FROM agency A
                 LEFT OUTER JOIN (
            SELECT
                AA.agency_id
                 ,COUNT(AA.id) AS CNT
            FROM user AA
            GROUP BY AA.agency_id
        ) B ON A.id = B.agency_id
                 LEFT OUTER JOIN (
                                SELECT
                                    AA.agency_id
                                     ,COUNT(CC.id) AS CNT
                                FROM resource_set AA
                                         LEFT OUTER JOIN resource_set_list BB ON AA.id = BB.resource_set_id
                                         LEFT OUTER JOIN resource CC ON BB.resource_id = CC.id
                                GROUP BY AA.agency_id
                            ) C ON A.id = C.agency_id
                 LEFT OUTER JOIN authorization D ON A.id = D.agency_id	AND D.has_read_auth = '1'	AND D.has_modify_auth = '1'
                 LEFT OUTER JOIN user F ON D.id = F.authorization_id
    </select>
    <select id="getPltfMngDtl" parameterType="hashMap" resultType="hashMap">
        SELECT
            A.id AS 중개사업자ID
             ,A.status AS 상태
             ,F.login_id AS 관라자ID
             ,A.name AS 중개사업자명
             ,A.ceo_name AS 대표자명
             ,A.phone AS 대표전화번호
             ,A.email AS 대표이메일
             ,A.business_registration_no AS 사업자번호
             ,A.address AS 주소
             ,A.zip_code AS 우편번호
             ,A.created_at AS 가입일자
             ,F.login_failure_count AS 비밀번호오류횟수
        FROM agency A
                 LEFT OUTER JOIN authorization D ON A.id = D.agency_id	AND D.has_read_auth = '1'	AND D.has_modify_auth = '1'
                 LEFT OUTER JOIN user F ON D.id = F.authorization_id
        WHERE 1=1
          AND A.id = #{중개사업자ID}
    </select>
    <select id="getAgencyBusiChk" parameterType="hashMap" resultType="int" >
        SELECT
            COUNT(id) AS CNT
        FROM agency
        WHERE 1=1
          AND business_registration_no = #{사업자등록번호}
    </select>
    <update id="setPltfMngSave"  parameterType="hashMap" >
        UPDATE agency SET
            name = #{중개사업사명}
            ,phone = #{대표전화번호}
            ,ceo_name = #{대표자명}
            ,email = #{대표이메일}
            ,business_registration_no = #{사업자등록번호}
            ,address = #{주소}
            ,zip_code = #{우편번호}
            ,status = #{상태}
        WHERE id = #{중개사업사ID}
    </update>
    <update id="setPltfMngDel"  parameterType="hashMap" >
        DELETE FROM agency  WHERE id = #{중개사업사ID}
    </update>
    <insert id="setAgencyAdd" parameterType="hashMap">
        INSERT INTO agency(
               name
              ,ceo_name
              ,phone
              ,email
              ,business_registration_no
              ,address
              ,zip_code
              ,status
              ,created_at
        )VALUES(
               #{중개사업자명}
               ,#{대표자명}
               ,#{대표전화번호}
               ,#{대표이메일}
               ,#{사업자등록번호}
               ,#{주소}
               ,#{우편번호}
               ,#{상태}
               ,NOW()
               )
        <selectKey keyProperty="agency_id" resultType="hashmap" order="AFTER">
            SELECT LAST_INSERT_ID() AS agency_id
        </selectKey>
    </insert>
    <insert id="setAuthorizationAdd" parameterType="hashMap">
        INSERT INTO authorization(
            agency_id
            ,name
            ,has_read_auth
            ,has_modify_auth
        )VALUES(
            #{중개사업자ID}
            ,'admin'
            ,'1'
            ,'1'
        )
        <selectKey keyProperty="auth_id" resultType="hashmap" order="AFTER">
            SELECT LAST_INSERT_ID() AS auth_id
        </selectKey>
    </insert>
    <insert id="setauthMenuMappingAdd" parameterType="hashMap">
        INSERT INTO auth_menu_mapping(
                                      auth_id
                                     ,menu_id
                                     ,has_read_auth
                                     ,has_modify_auth
        )SELECT #{권한레벨},id,'1','1' FROM menu WHERE 1=1 and has_admin_auth = '1'
    </insert>

    <select id="getCodeList" parameterType="hashMap" resultType="hashMap" >
        SELECT
            category AS 그룹코드ID
             ,definition AS 코드설명
        FROM admin_common_code
        WHERE 1=1
        <if test='category != null and category !=""'>
            AND category LIKE CONCAT('%',#{category},'%')
        </if>
        GROUP BY category
        ORDER BY category
    </select>
    <select id="getCodeDtl" parameterType="hashMap" resultType="hashMap" >
        SELECT
            category AS 그룹코드ID
             ,code AS 코드ID
             ,name AS 코드명
             ,definition AS 코드설명
             ,sequence AS 순서
             ,is_usable AS 사용여부
        FROM admin_common_code
        WHERE category = #{그룹코드ID}
        ORDER BY  sequence
    </select>
    <update id="setCodeSave"  parameterType="hashMap" >
        UPDATE admin_common_code SET
            name = #{코드명}
            ,definition = #{코드설명}
            ,sequence = #{순서}
            ,is_usable = #{사용여부}
        WHERE category = #{그룹코드ID}
          AND code = #{코드ID}
    </update>
</mapper>