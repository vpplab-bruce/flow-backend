<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="io.vpplab.flow.domain.prdc.PrdcDao">
    <select id="getPrdcAnlyList" parameterType="hashMap" resultType="hashMap">
        SELECT
        CC.집합자원ID
        ,CC.중개사업자ID
        ,CC.집합자원그룹명
        ,CC.집합자원구분
        ,CC.운영상태
        ,CC.신청유형
        ,CC.처리상태
        ,CC.구성수
        ,CC.자원용량
        ,CC.PVWT용량
        ,CC.ESS용량
        ,CC.평균오차율
        ,CC.오차율평가
        ,CC.거래가능기간
        ,CC.신청일자
        ,CC.메모내용
        FROM(SELECT
                A.id AS 집합자원ID
                ,A.agency_id AS 중개사업자ID
                ,A.name AS 집합자원그룹명
                ,A.type AS 집합자원구분
                ,A.status AS 운영상태
                ,A.apply_type AS 신청유형
                ,A.apply_status AS 처리상태
                ,B.resource_cnt AS 구성수
                ,B.capacity AS 자원용량
                ,B.capacityPvWt AS PVWT용량
                ,B.ess_capacity AS ESS용량
                ,C.error_rate AS 평균오차율
                ,(CASE WHEN C.error_rate >= 0 AND C.error_rate     <![CDATA[ <= ]]> 6 THEN '좋음'
                WHEN C.error_rate > 6 AND C.error_rate     <![CDATA[ <= ]]> 8 THEN '보통'
                WHEN C.error_rate > 8 THEN '나쁨' END) AS 오차율평가
                ,B.brokerage_contract_end_date AS 거래가능기간
                ,A.created_at AS 신청일자
                ,D.content AS 메모내용
            FROM resource_set A
            LEFT OUTER JOIN ( SELECT
                                AA.resource_set_id
                                ,COUNT(AA.resource_id) AS  resource_cnt
                                ,((CASE WHEN BB.facility_type ='01' OR BB.facility_type = '02' THEN SUM(BB.capacity) ELSE 0 END)+SUM(ess_capacity))  AS capacity
                                ,CASE WHEN BB.facility_type ='01' OR BB.facility_type = '02' THEN SUM(BB.capacity) END AS capacityPvWt
                                ,SUM(BB.ess_capacity) AS ess_capacity
                                ,MIN(CC.brokerage_contract_end_date) AS brokerage_contract_end_date
                            FROM resource_set_list AA
                            LEFT OUTER JOIN resource BB ON AA.resource_id = BB.id
                            LEFT OUTER JOIN resource_meta CC ON BB.id = CC.resource_id
                            GROUP BY AA.resource_set_id) B ON A.id = B.resource_set_id

            LEFT OUTER JOIN(SELECT
                                resource_set_id
                                ,(SUM(error_rate) / COUNT(error_rate)) * 100 AS error_rate
                            FROM  forecast_by_resource_set GROUP BY resource_set_id ) C ON A.id = C.resource_set_id
           LEFT OUTER JOIN resource_set_memo_log D ON A.id = D.resource_set_id
           WHERE A.is_simulation = '1'
            ) CC
        WHERE 1=1

        AND CC.중개사업자ID = #{중개사업자ID}
        <if test='id != null and id !=""'>
            AND CC.집합자원ID = #{id}
        </if>
        <if test='type != null and type !=""'>
            AND CC.집합자원구분 = #{type}
        </if>
        <if test='status != null and status !=""'>
            AND CC.운영상태 = #{status}
        </if>
        <if test='name != null and name !=""'>
            AND CC.집합자원그룹명 LIKE CONCAT('%',#{name},'%')
        </if>
        <if test='apply_type != null and apply_type !=""'>
            AND CC.신청유형 = #{apply_type}
        </if>
        <if test='apply_status != null and apply_status !=""'>
            AND CC.처리상태 = #{apply_status}
        </if>
        <if test='error_rate_cd != null and error_rate_cd !=""'>
            <if test='error_rate_cd !="01"'>
                AND CC.오차율평가 >= 0
                AND CC.오차율평가 <![CDATA[ <= ]]> 6
            </if>
            <if test='error_rate_cd !="02"'>
                AND CC.오차율평가 > 6
                AND CC.오차율평가 <![CDATA[ <= ]]> 8
            </if>
            <if test='error_rate_cd !="03"'>
                AND CC.오차율평가 > 8
            </if>
        </if>
        ORDER BY CC.집합자원ID
        LIMIT #{페이지번호},#{행갯수}
    </select>
    <select id="getPrdcAnlyInfo"  parameterType="hashMap" resultType="hashMap">
        SELECT
            MAX(C.운영상태) AS 운영상태
             ,SUM(C.운영구성수) AS 운영구성수
             ,SUM(C.운영자원용량) AS 운영자원용량
             ,MAX(C.정지상태) AS 정지상태
             ,SUM(C.정지구성수) AS 정지구성수
             ,SUM(C.정지자원용량) AS 정지자원용량
             ,MAX(C.시험상태) AS 시험상태
             ,SUM(C.시험구성수) AS 시험구성수
             ,SUM(C.시험자원용량) AS 시험자원용량
        FROM(SELECT
                 A.agency_id AS 중개사업자ID
                  ,CASE WHEN A.status = '01' THEN '01' END AS  운영상태
                  ,CASE WHEN A.status = '01' THEN SUM(B.resource_cnt) END AS  운영구성수
                  ,CASE WHEN A.status = '01' THEN SUM(B.capacity) END AS  운영자원용량
                  ,CASE WHEN A.status = '02' THEN '02' END AS 정지상태
                  ,CASE WHEN A.status = '02' THEN SUM(B.resource_cnt) END AS  정지구성수
                  ,CASE WHEN A.status = '02' THEN SUM(B.capacity) END AS  정지자원용량
                  ,CASE WHEN A.status = '03' THEN '03' END AS  시험상태
                  ,CASE WHEN A.status = '03' THEN SUM(B.resource_cnt) END AS 시험구성수
                  ,CASE WHEN A.status = '03' THEN SUM(B.capacity) END AS 시험자원용량
             FROM resource_set A
                      LEFT OUTER JOIN ( SELECT
                                            AA.resource_set_id
                                             ,COUNT(AA.resource_id) AS  resource_cnt
                                             ,((CASE WHEN BB.facility_type ='01' OR BB.facility_type = '02' THEN SUM(BB.capacity) ELSE 0 END)+SUM(ess_capacity))  AS capacity
                                        FROM resource_set_list AA
                                                 LEFT OUTER JOIN resource BB ON AA.resource_id = BB.id
                                        GROUP BY AA.resource_set_id) B ON A.id = B.resource_set_id
             WHERE A.agency_id =  #{중개사업자ID}
               AND A.is_simulation = '1'
             GROUP BY A.status ) C
    </select>
    <select id="getPrdcAnlyListCnt" parameterType="hashMap" resultType="int">
        SELECT
        COUNT(*) AS cnt
        FROM(SELECT
                A.id AS 집합자원ID
                ,A.agency_id AS 중개사업자ID
                ,A.name AS 집합자원그룹명
                ,A.type AS 집합자원구분
                ,A.status AS 운영상태
                ,A.apply_type AS 신청유형
                ,A.apply_status AS 처리상태
                ,B.resource_cnt AS 구성수
                ,B.capacity AS 자원용량
                ,B.capacityPvWt AS PVWT용량
                ,B.ess_capacity AS ESS용량
                ,C.error_rate AS 평균오차율
                ,(CASE WHEN C.error_rate >= 0 AND C.error_rate     <![CDATA[ <= ]]> 6 THEN '좋음'
                WHEN C.error_rate > 6 AND C.error_rate     <![CDATA[ <= ]]> 8 THEN '보통'
                WHEN C.error_rate > 8 THEN '나쁨' END) AS 오차율평가
                ,A.created_at AS 신청일자
            FROM resource_set A
            LEFT OUTER JOIN ( SELECT
                                AA.resource_set_id
                                ,COUNT(resource_id) AS  resource_cnt
                                ,((CASE WHEN BB.facility_type ='01' OR BB.facility_type = '02' THEN SUM(BB.capacity) ELSE 0 END)+SUM(ess_capacity))  AS capacity
                                ,CASE WHEN BB.facility_type ='01' OR BB.facility_type = '02' THEN SUM(BB.capacity) END AS capacityPvWt
                                ,SUM(BB.ess_capacity) AS ess_capacity
                            FROM resource_set_list AA
                            LEFT OUTER JOIN resource BB ON AA.resource_id = BB.id  GROUP BY AA.resource_set_id) B ON A.id = B.resource_set_id
            LEFT OUTER JOIN(SELECT
                            resource_set_id
                            ,(SUM(error_rate) / COUNT(error_rate)) * 100 AS error_rate
                        FROM  forecast_by_resource_set GROUP BY resource_set_id ) C ON A.id = C.resource_set_id
                        WHERE A.is_simulation = '1'
            ) CC
        WHERE 1=1
        AND CC.중개사업자ID = #{중개사업자ID}
        <if test='id != null and id !=""'>
            AND CC.집합자원ID = #{id}
        </if>
        <if test='type != null and type !=""'>
            AND CC.집합자원구분 = #{type}
        </if>
        <if test='status != null and status !=""'>
            AND CC.운영상태 = #{status}
        </if>
        <if test='name != null and name !=""'>
            AND CC.집합자원그룹명 LIKE CONCAT('%',#{name},'%')
        </if>
        <if test='apply_type != null and apply_type !=""'>
            AND CC.신청유형 = #{apply_type}
        </if>
        <if test='apply_status != null and apply_status !=""'>
            AND CC.처리상태 = #{apply_status}
        </if>
        <if test='error_rate_cd != null and error_rate_cd !=""'>
            <if test='error_rate_cd !="01"'>
                AND CC.오차율평가 >= 0
                AND CC.오차율평가 <![CDATA[ <= ]]> 6
            </if>
            <if test='error_rate_cd !="02"'>
                AND CC.오차율평가 > 6
                AND CC.오차율평가 <![CDATA[ <= ]]> 8
            </if>
            <if test='error_rate_cd !="03"'>
                AND CC.오차율평가 > 8
            </if>
        </if>
    </select>

    <select id="getPrdcAnlyRsrInfo" parameterType="hashMap" resultType="hashMap" >
        SELECT
            COUNT(A.resource_set_id) AS 집합자원갯수
             ,C.집합지원총용량
             ,C.평균오차율평가
             ,C.평균오차율
             ,C.최대오차율평가
             ,C.최대오차율
             ,C.최소오차율평가
             ,C.최소오차율
             ,(B.cnt /B.allCnt) * 100 AS 가동율
        FROM resource_set_list A
                 INNER JOIN resource_set D ON A.resource_set_id = D.id AND D.is_simulation = '1'
                 LEFT OUTER JOIN (
            SELECT
                id
                 ,SUM(CASE WHEN status = '01' THEN '1' ELSE '0' END) AS cnt
                 ,COUNT(status) AS allCnt
            FROM resource
        ) B ON A.resource_id = B.id
                 LEFT OUTER JOIN (
            SELECT
                resource_set_id
                 ,SUM(resource_capacity) AS 집합지원총용량
                 ,(CASE WHEN ((SUM(error_rate) / COUNT(error_rate)) *100) >= 0 AND ((SUM(error_rate) / COUNT(error_rate)) *100)  <![CDATA[ <= ]]>  6 THEN '좋음'
                        WHEN ((SUM(error_rate) / COUNT(error_rate)) *100) > 6 AND ((SUM(error_rate) / COUNT(error_rate)) *100)  <![CDATA[ <= ]]>  8 THEN '보통'
                        WHEN ((SUM(error_rate) / COUNT(error_rate)) *100) > 8 THEN '나쁨' END) AS 평균오차율평가
                 ,(SUM(error_rate) / COUNT(error_rate)) *100  AS 평균오차율
                 ,(CASE WHEN MAX(error_rate) >= 0 AND MAX(error_rate) <![CDATA[ <= ]]> 6 THEN '좋음'
                        WHEN MAX(error_rate) > 6 AND MAX(error_rate)  <![CDATA[ <= ]]>  8 THEN '보통'
                        WHEN MAX(error_rate) > 8 THEN '나쁨' END) AS  최대오차율평가
                 ,MAX(error_rate) AS 최대오차율
                 ,(CASE WHEN MIN(error_rate) >= 0 AND MIN(error_rate) <![CDATA[ <= ]]>  6 THEN '좋음'
                        WHEN MIN(error_rate) > 6 AND MIN(error_rate)  <![CDATA[ <= ]]>  8 THEN '보통'
                        WHEN MIN(error_rate) > 8 THEN '나쁨' END) AS  최소오차율평가
                 ,MIN(error_rate) AS 최소오차율
            FROM forecast_by_resource_set
        ) C ON A.resource_set_id = C.resource_set_id
        WHERE A.resource_set_id = #{집합자원ID}
        GROUP BY A.resource_set_id
    </select>


    <select id="tab1PrdcList01" parameterType="hashMap" resultType="hashMap" >
        SELECT
            A.base_date AS 측정일자
             ,A.base_time AS 측정시간
             ,A.forecast_amount_1st AS 1차예측
             ,A.forecast_amount_2nd AS 2차예측
             ,(A.forecast_amount_1st+A.forecast_amount_2nd) /2 AS 예측평균
             ,A.generation_amount AS 발전값
             ,A.resource_capacity AS 총설비용량
             ,A.error_rate AS 오차율
             ,C.id AS 메모갯수
        FROM forecast_by_resource_set A
                 INNER JOIN resource_set_list B ON A.resource_set_id = B.resource_set_id
                 LEFT OUTER JOIN (
            SELECT
                BB.base_time
                 ,count(AA.id) AS id
            FROM event AA
                     LEFT OUTER JOIN forecast_by_resource_set BB ON 1=1 AND BB.resource_set_id =#{집합자원ID}  AND DATE_FORMAT(BB.base_date,'%Y%m%d') = DATE_FORMAT(IF(#{기준일자},#{기준일자},NOW()),'%Y%m%d')
            WHERE AA.requested_memo IS NOT NULL
              AND DATE_FORMAT(AA.requested_at,'%Y%m%d') = DATE_FORMAT(IF(#{기준일자},#{기준일자},NOW()),'%Y%m%d')
              AND DATE_FORMAT(BB.base_time,'%H%i')  <![CDATA[ >= ]]> DATE_FORMAT(AA.start_at,'%H%i') AND   DATE_FORMAT(BB.base_time,'%H%i')  <![CDATA[ <= ]]> DATE_FORMAT(AA.end_at,'%H%i')
            GROUP BY DATE_FORMAT(BB.base_time,'%H%i')
        ) C ON DATE_FORMAT(A.base_time,'%H%i')  = DATE_FORMAT(C.base_time,'%H%i')

        WHERE 1=1
          AND A.resource_set_id = #{집합자원ID}
          AND DATE_FORMAT(A.base_date,'%Y%m%d') = DATE_FORMAT(IF(#{기준일자},#{기준일자},NOW()),'%Y%m%d')
        GROUP BY DATE_FORMAT(A.base_time,'%H%i')
        ORDER BY A.base_date,A.base_time

    </select>
    <select id="tab1PrdcList02" parameterType="hashMap" resultType="hashMap" >
        SELECT
            A.base_date AS 측정일자
             ,A.base_time AS 측정시간
             ,A.forecast_amount_1st AS 1차예측
             ,A.forecast_amount_2nd AS 2차예측
             ,(A.forecast_amount_1st+A.forecast_amount_2nd) /2 AS 예측평균
             ,A.generation_amount AS 발전값
             ,A.resource_capacity AS 총설비용량
             ,A.error_rate AS 오차율
             ,C.id AS 메모갯수
        FROM forecast_by_resource_set A
                 INNER JOIN resource_set_list B ON A.resource_set_id = B.resource_set_id
                 LEFT OUTER JOIN (
            SELECT
                count(AA.id) AS id
                 ,AA.resource_id
            FROM event AA
            WHERE AA.requested_memo IS NOT NULL
              AND DATE_FORMAT(AA.requested_at,'%Y%m') = DATE_FORMAT(IF(#{기준일자},#{기준일자},NOW()),'%Y%m')
            GROUP BY DATE_FORMAT(AA.requested_at,'%Y%m%d')
        ) C ON B.resource_id= C.resource_id

        WHERE 1=1
          AND A.resource_set_id =  #{집합자원ID}
          AND DATE_FORMAT(A.base_date,'%Y%m') = DATE_FORMAT(IF(#{기준일자},#{기준일자},NOW()),'%Y%m')
        GROUP BY DATE_FORMAT(A.base_date,'%Y%m%d')
        ORDER BY A.base_date,A.base_time

    </select>
    <select id="tab1PrdcList03" parameterType="hashMap" resultType="hashMap" >
        SELECT
            DATE_FORMAT(A.base_date,'%Y%m') AS 측정일자
             ,A.base_time AS 측정시간
             ,A.forecast_amount_1st AS 1차예측
             ,A.forecast_amount_2nd AS 2차예측
             ,(A.forecast_amount_1st+A.forecast_amount_2nd) /2 AS 예측평균
             ,A.generation_amount AS 발전값
             ,A.resource_capacity AS 총설비용량
             ,A.error_rate AS 오차율
             ,C.id  AS 메모갯수
        FROM forecast_by_resource_set A
                 INNER JOIN resource_set_list B ON A.resource_set_id = B.resource_set_id
                 LEFT OUTER JOIN (
            SELECT
                count(AA.id) AS id
                 ,AA.resource_id
            FROM event AA
            WHERE AA.requested_memo IS NOT NULL
              AND DATE_FORMAT(AA.requested_at,'%Y') = DATE_FORMAT(IF(#{기준일자},#{기준일자},NOW()),'%Y')
            GROUP BY DATE_FORMAT(AA.requested_at,'%Y%m')
        ) C ON B.resource_id= C.resource_id

        WHERE 1=1
          AND A.resource_set_id = #{집합자원ID}
          AND DATE_FORMAT(A.base_date,'%Y') = DATE_FORMAT(IF(#{기준일자},#{기준일자},NOW()),'%Y')
        GROUP BY DATE_FORMAT(A.base_date,'%Y%m')
        ORDER BY A.base_date,A.base_time

    </select>
    <select id="tab2PrdcList" parameterType="hashMap" resultType="hashMap" >
        SELECT
            B.id AS 자원ID
             ,B.facility_type AS 설비구분
             ,B.status AS 발전상태
             ,B.capacity AS 설비용량
             ,B.ess_status AS ESS상태
             ,B.ess_capacity AS ESS용량
             ,B.name AS 발전자원명
             ,C.avg_error_rate AS 평균오차율
             ,C.max_error_rate AS 최대오차율
             ,C.min_error_rate AS 최소오차율
             ,D.brokerage_contract_end_date AS 계약종료일시
             ,B.created_at AS 자원추가일시
        FROM resource_set_list A
                 INNER JOIN resource B ON  A.resource_id = B.id
                 INNER JOIN resource_set E ON A.resource_set_id = E.id AND E.is_simulation = '1'
                 LEFT OUTER JOIN ( SELECT
                                       resource_id
                                        ,(SUM(error_rate) / COUNT(error_rate)) *100  AS avg_error_rate
                                        ,MAX(error_rate) AS max_error_rate
                                        ,MIN(error_rate) AS min_error_rate
                                   FROM forecast_by_resource GROUP BY resource_id
        ) C ON  B.id = C.resource_id
                 LEFT OUTER JOIN resource_meta D ON A.resource_id = D.resource_id
        WHERE A.resource_set_id = #{집합자원ID}
        ORDER BY B.id
            LIMIT #{페이지번호},#{행갯수}
    </select>
    <select id="tab2PrdcListCnt" parameterType="hashMap" resultType="int" >
        SELECT
            COUNT(*) AS CNT
        FROM resource_set_list A
                 INNER JOIN resource B ON  A.resource_id = B.id
                 INNER JOIN resource_set E ON A.resource_set_id = E.id AND E.is_simulation = '1'
                 LEFT OUTER JOIN ( SELECT
                                       resource_id
                                        ,(SUM(error_rate) / COUNT(error_rate)) *100  AS avg_error_rate
                                        ,MAX(error_rate) AS max_error_rate
                                        ,MIN(error_rate) AS min_error_rate
                                   FROM forecast_by_resource GROUP BY resource_id
        ) C ON  B.id = C.resource_id
                 LEFT OUTER JOIN resource_meta D ON A.resource_id = D.resource_id
        WHERE A.resource_set_id = #{집합자원ID}
    </select>

    <select id="getPrdcAnlyDtl" parameterType="hashMap" resultType="hashMap" >
        SELECT
            A.agency_id AS 중개사업자ID
             ,A.name AS 집합자원그룹명
             ,A.status AS 운영상태
             ,A.type AS 집합자원구분
             ,A.created_at AS 신청일시
             ,B.content AS 메모
        FROM resource_set A
                 LEFT OUTER JOIN resource_set_memo_log B ON A.id = B.resource_set_id
        WHERE A.id= #{집합자원ID}
          AND A.is_simulation = '1'
    </select>
    <insert id="setPrdcAnly" parameterType="hashMap">
        INSERT INTO resource_set(
                 agency_id
                ,name
                ,status
                ,type
                ,apply_type
                ,apply_status
                ,created_at
                ,created_by
                ,is_simulation
        )VALUES(
                #{중개사업자ID}
               ,#{집합자원그룹명}
               ,#{운영상태}
               ,#{집합자원구분}
               ,'01'
               ,'01'
               ,DATE_FORMAT(NOW(),'%Y%m%d')
               ,#{작성자}
               ,'1'
               )
        <selectKey keyProperty="id" resultType="hashmap" order="AFTER">
            SELECT LAST_INSERT_ID() AS id
        </selectKey>
    </insert>
    <insert id="setPrdcAnlyMeno" parameterType="hashMap">
        INSERT INTO resource_set_memo_log(
        resource_set_id
        ,content
        ,created_by
        ,created_at
        )VALUES(
         #{집합자원ID}
        ,#{메모내용}
        ,#{작성자}
        ,DATE_FORMAT(NOW(),'%Y%m%d')
        )

    </insert>
    <update id="setPrdcAnlySave" parameterType="hashMap"  >
        UPDATE resource_set SET
            name = #{집합자원그룹명}
          ,status = #{운영상태}
          ,type = #{집합자원구분}
        WHERE agency_id = #{중개사업자ID}
          AND id = #{집합자원ID}
    </update>
    <update id="setPrdcAnlyMenoSave" parameterType="hashMap"  >
        UPDATE resource_set_memo_log SET
            content = #{메모내용}
        WHERE resource_set_id = #{집합자원ID}
    </update>
    <update id="setPrdcAnlyDel" parameterType="hashMap"  >
        DELETE FROM resource_set   WHERE agency_id = #{중개사업자ID} AND id = #{집합자원ID}
    </update>
    <update id="setPrdcAnlyListDel" parameterType="hashMap"  >
        DELETE FROM resource_set_list   WHERE resource_set_id = #{집합자원ID}
    </update>
    <update id="setPrdcAnlyMenoDel" parameterType="hashMap"  >
        DELETE FROM resource_set_memo_log   WHERE resource_set_id = #{집합자원ID}
    </update>

    <select id="getPrdcAnlyPlantList" parameterType="hashMap" resultType="hashMap" >
        SELECT
        A.id AS 자원ID
        ,A.facility_type AS 설비구분
        ,A.status AS 발전상태
        ,A.capacity AS 설비용량
        ,A.ess_status AS ESS상태
        ,A.ess_capacity AS ESS용량
        ,(A.capacity+A.ess_capacity) AS 합산용량
        ,A.name AS 발전자원명
        ,B.avg_error_rate AS 평균오차율
        ,B.max_error_rate AS 최대오차율
        ,B.min_error_rate AS 최소오차율
        ,C.brokerage_contract_end_date AS 계약종료일시
        ,A.created_at AS 자원추가일시
        FROM resource A
        LEFT OUTER JOIN ( SELECT
        resource_id
        ,(SUM(error_rate) / COUNT(error_rate)) *100  AS avg_error_rate
        ,MAX(error_rate) AS max_error_rate
        ,MIN(error_rate) AS min_error_rate
        FROM forecast_by_resource GROUP BY resource_id
        ) B ON  A.id = B.resource_id
        LEFT OUTER JOIN resource_meta C ON A.id = C.resource_id
        WHERE 1=1
        <if test='facility_type != null and facility_type !=""'>
            AND A.facility_type = #{facility_type}
        </if>
        <if test='status != null and status !=""'>
            AND A.status = #{status}
        </if>
        <if test='name != null and name !=""'>
            AND A.name LIKE CONCAT('%',#{name},'%')
        </if>
        <if test='stat_capacity != null and stat_capacity !=""'>
            AND A.capacity <![CDATA[ >= ]]>  #{stat_capacity}
        </if>
        <if test='end_capacity != null and end_capacity !=""'>
            AND A.capacity <![CDATA[ <= ]]>  #{end_capacity}
        </if>
        <if test='stat_avg_error_rate != null and stat_avg_error_rate !=""'>
            AND B.avg_error_rate <![CDATA[ >= ]]>  #{stat_avg_error_rate}
        </if>
        <if test='end_avg_error_rate != null and end_avg_error_rate !=""'>
            AND B.avg_error_rate <![CDATA[ <= ]]>  #{end_avg_error_rate}
        </if>
        ORDER BY A.id
        LIMIT 0,#{행갯수}
    </select>
    <select id="getPrdcAnlyPlantListCnt" parameterType="hashMap" resultType="int" >
        SELECT
        COUNT(A.id)  AS CNT
        FROM resource A
        LEFT OUTER JOIN ( SELECT
        resource_id
        ,(SUM(error_rate) / COUNT(error_rate)) *100  AS avg_error_rate
        ,MAX(error_rate) AS max_error_rate
        ,MIN(error_rate) AS min_error_rate
        FROM forecast_by_resource GROUP BY resource_id
        ) B ON  A.id = B.resource_id
        LEFT OUTER JOIN resource_meta C ON A.id = C.resource_id
        WHERE 1=1
        <if test='facility_type != null and facility_type !=""'>
            AND A.facility_type = #{facility_type}
        </if>
        <if test='status != null and status !=""'>
            AND A.status = #{status}
        </if>
        <if test='name != null and name !=""'>
            AND A.name LIKE CONCAT('%',#{name},'%')
        </if>
        <if test='stat_capacity != null and stat_capacity !=""'>
            AND A.capacity <![CDATA[ >= ]]>  #{stat_capacity}
        </if>
        <if test='end_capacity != null and end_capacity !=""'>
            AND A.capacity <![CDATA[ <= ]]>  #{end_capacity}
        </if>
        <if test='stat_avg_error_rate != null and stat_avg_error_rate !=""'>
            AND B.avg_error_rate <![CDATA[ >= ]]>  #{stat_avg_error_rate}
        </if>
        <if test='end_avg_error_rate != null and end_avg_error_rate !=""'>
            AND B.avg_error_rate <![CDATA[ <= ]]>  #{end_avg_error_rate}
        </if>
        ORDER BY A.id
    </select>
    <select id="getPrdcAnlyPlantONList" parameterType="hashMap" resultType="hashMap" >
        SELECT
            B.id AS 자원ID
             ,B.facility_type AS 설비구분
             ,B.status AS 발전상태
             ,B.capacity AS 설비용량
             ,B.ess_status AS ESS상태
             ,B.ess_capacity AS ESS용량
             ,(B.capacity+B.ess_capacity) AS 합산용량
             ,B.name AS 발전자원명
             ,C.avg_error_rate AS 평균오차율
             ,C.max_error_rate AS 최대오차율
             ,C.min_error_rate AS 최소오차율
             ,D.brokerage_contract_end_date AS 계약종료일시
             ,B.created_at AS 자원추가일시
        FROM resource_set_list A
                 INNER JOIN resource B ON  A.resource_id = B.id
                 INNER JOIN resource_set C ON A.resource_set_id = C.id AND C.is_simulation = '1'
                 LEFT OUTER JOIN ( SELECT
                                       resource_id
                                        ,(SUM(error_rate) / COUNT(error_rate)) *100  AS avg_error_rate
                                        ,MAX(error_rate) AS max_error_rate
                                        ,MIN(error_rate) AS min_error_rate
                                   FROM forecast_by_resource GROUP BY resource_id
        ) C ON  B.id = C.resource_id
                 LEFT OUTER JOIN resource_meta D ON A.resource_id = D.resource_id
        WHERE A.resource_set_id = #{집합자원ID}
        ORDER BY B.id
    </select>
    <insert id="setPrdcAnlyPlant" parameterType="hashMap">
        INSERT INTO resource_set_list(
                  resource_set_id
                 ,resource_id
        )VALUES(
                #{집합자원ID}
               ,#{자원ID}
               )
    </insert>
    <update id="setPrdcAnlyPlantDel" parameterType="hashMap"  >
        DELETE FROM resource_set_list   WHERE resource_set_id = #{집합자원ID} AND resource_id = {자원ID}
    </update>

</mapper>


